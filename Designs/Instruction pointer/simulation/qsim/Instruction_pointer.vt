// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2016 09:28:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Instruction_pointer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Instruction_pointer_vlg_sample_tst(
	cargar,
	clk,
	get_ip,
	inc_ip,
	load_ip,
	rst_ip,
	sampler_tx
);
input [31:0] cargar;
input  clk;
input  get_ip;
input  inc_ip;
input  load_ip;
input  rst_ip;
output sampler_tx;

reg sample;
time current_time;
always @(cargar or clk or get_ip or inc_ip or load_ip or rst_ip)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Instruction_pointer_vlg_check_tst (
	instruccion,
	sampler_rx
);
input [12:0] instruccion;
input sampler_rx;

reg [12:0] instruccion_expected;

reg [12:0] instruccion_prev;

reg [12:0] instruccion_expected_prev;

reg [12:0] last_instruccion_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	instruccion_prev = instruccion;
end

// update expected /o prevs

always @(trigger)
begin
	instruccion_expected_prev = instruccion_expected;
end


// expected instruccion[ 12 ]
initial
begin
	instruccion_expected[12] = 1'bX;
end 
// expected instruccion[ 11 ]
initial
begin
	instruccion_expected[11] = 1'bX;
end 
// expected instruccion[ 10 ]
initial
begin
	instruccion_expected[10] = 1'bX;
end 
// expected instruccion[ 9 ]
initial
begin
	instruccion_expected[9] = 1'bX;
end 
// expected instruccion[ 8 ]
initial
begin
	instruccion_expected[8] = 1'bX;
end 
// expected instruccion[ 7 ]
initial
begin
	instruccion_expected[7] = 1'bX;
end 
// expected instruccion[ 6 ]
initial
begin
	instruccion_expected[6] = 1'bX;
end 
// expected instruccion[ 5 ]
initial
begin
	instruccion_expected[5] = 1'bX;
end 
// expected instruccion[ 4 ]
initial
begin
	instruccion_expected[4] = 1'bX;
end 
// expected instruccion[ 3 ]
initial
begin
	instruccion_expected[3] = 1'bX;
end 
// expected instruccion[ 2 ]
initial
begin
	instruccion_expected[2] = 1'bX;
end 
// expected instruccion[ 1 ]
initial
begin
	instruccion_expected[1] = 1'bX;
end 
// expected instruccion[ 0 ]
initial
begin
	instruccion_expected[0] = 1'bX;
end 
// generate trigger
always @(instruccion_expected or instruccion)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected instruccion = %b | ",instruccion_expected_prev);
	$display("| real instruccion = %b | ",instruccion_prev);
`endif
	if (
		( instruccion_expected_prev[0] !== 1'bx ) && ( instruccion_prev[0] !== instruccion_expected_prev[0] )
		&& ((instruccion_expected_prev[0] !== last_instruccion_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[0] = instruccion_expected_prev[0];
	end
	if (
		( instruccion_expected_prev[1] !== 1'bx ) && ( instruccion_prev[1] !== instruccion_expected_prev[1] )
		&& ((instruccion_expected_prev[1] !== last_instruccion_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[1] = instruccion_expected_prev[1];
	end
	if (
		( instruccion_expected_prev[2] !== 1'bx ) && ( instruccion_prev[2] !== instruccion_expected_prev[2] )
		&& ((instruccion_expected_prev[2] !== last_instruccion_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[2] = instruccion_expected_prev[2];
	end
	if (
		( instruccion_expected_prev[3] !== 1'bx ) && ( instruccion_prev[3] !== instruccion_expected_prev[3] )
		&& ((instruccion_expected_prev[3] !== last_instruccion_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[3] = instruccion_expected_prev[3];
	end
	if (
		( instruccion_expected_prev[4] !== 1'bx ) && ( instruccion_prev[4] !== instruccion_expected_prev[4] )
		&& ((instruccion_expected_prev[4] !== last_instruccion_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[4] = instruccion_expected_prev[4];
	end
	if (
		( instruccion_expected_prev[5] !== 1'bx ) && ( instruccion_prev[5] !== instruccion_expected_prev[5] )
		&& ((instruccion_expected_prev[5] !== last_instruccion_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[5] = instruccion_expected_prev[5];
	end
	if (
		( instruccion_expected_prev[6] !== 1'bx ) && ( instruccion_prev[6] !== instruccion_expected_prev[6] )
		&& ((instruccion_expected_prev[6] !== last_instruccion_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[6] = instruccion_expected_prev[6];
	end
	if (
		( instruccion_expected_prev[7] !== 1'bx ) && ( instruccion_prev[7] !== instruccion_expected_prev[7] )
		&& ((instruccion_expected_prev[7] !== last_instruccion_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[7] = instruccion_expected_prev[7];
	end
	if (
		( instruccion_expected_prev[8] !== 1'bx ) && ( instruccion_prev[8] !== instruccion_expected_prev[8] )
		&& ((instruccion_expected_prev[8] !== last_instruccion_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[8] = instruccion_expected_prev[8];
	end
	if (
		( instruccion_expected_prev[9] !== 1'bx ) && ( instruccion_prev[9] !== instruccion_expected_prev[9] )
		&& ((instruccion_expected_prev[9] !== last_instruccion_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[9] = instruccion_expected_prev[9];
	end
	if (
		( instruccion_expected_prev[10] !== 1'bx ) && ( instruccion_prev[10] !== instruccion_expected_prev[10] )
		&& ((instruccion_expected_prev[10] !== last_instruccion_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[10] = instruccion_expected_prev[10];
	end
	if (
		( instruccion_expected_prev[11] !== 1'bx ) && ( instruccion_prev[11] !== instruccion_expected_prev[11] )
		&& ((instruccion_expected_prev[11] !== last_instruccion_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[11] = instruccion_expected_prev[11];
	end
	if (
		( instruccion_expected_prev[12] !== 1'bx ) && ( instruccion_prev[12] !== instruccion_expected_prev[12] )
		&& ((instruccion_expected_prev[12] !== last_instruccion_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccion[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccion_expected_prev);
		$display ("     Real value = %b", instruccion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccion_exp[12] = instruccion_expected_prev[12];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Instruction_pointer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] cargar;
reg clk;
reg get_ip;
reg inc_ip;
reg load_ip;
reg rst_ip;
// wires                                               
wire [12:0] instruccion;

wire sampler;                             

// assign statements (if any)                          
Instruction_pointer i1 (
// port map - connection between master ports and signals/registers   
	.cargar(cargar),
	.clk(clk),
	.get_ip(get_ip),
	.inc_ip(inc_ip),
	.instruccion(instruccion),
	.load_ip(load_ip),
	.rst_ip(rst_ip)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// load_ip
initial
begin
	load_ip = 1'b0;
	load_ip = #190000 1'b1;
	load_ip = #10000 1'b0;
end 

// get_ip
initial
begin
	get_ip = 1'b0;
	get_ip = #10000 1'b1;
	get_ip = #10000 1'b0;
	get_ip = #70000 1'b1;
	get_ip = #10000 1'b0;
	get_ip = #70000 1'b1;
	get_ip = #10000 1'b0;
	get_ip = #30000 1'b1;
	get_ip = #10000 1'b0;
end 

// inc_ip
initial
begin
	inc_ip = 1'b0;
	inc_ip = #30000 1'b1;
	inc_ip = #10000 1'b0;
	inc_ip = #10000 1'b1;
	inc_ip = #10000 1'b0;
	inc_ip = #10000 1'b1;
	inc_ip = #10000 1'b0;
	inc_ip = #50000 1'b1;
	inc_ip = #10000 1'b0;
	inc_ip = #10000 1'b1;
	inc_ip = #10000 1'b0;
end 

// rst_ip
initial
begin
	rst_ip = 1'b0;
	rst_ip = #110000 1'b1;
	rst_ip = #10000 1'b0;
end 
// cargar[ 31 ]
initial
begin
	cargar[31] = 1'b0;
end 
// cargar[ 30 ]
initial
begin
	cargar[30] = 1'b0;
end 
// cargar[ 29 ]
initial
begin
	cargar[29] = 1'b0;
end 
// cargar[ 28 ]
initial
begin
	cargar[28] = 1'b0;
end 
// cargar[ 27 ]
initial
begin
	cargar[27] = 1'b0;
end 
// cargar[ 26 ]
initial
begin
	cargar[26] = 1'b0;
end 
// cargar[ 25 ]
initial
begin
	cargar[25] = 1'b0;
end 
// cargar[ 24 ]
initial
begin
	cargar[24] = 1'b0;
end 
// cargar[ 23 ]
initial
begin
	cargar[23] = 1'b0;
end 
// cargar[ 22 ]
initial
begin
	cargar[22] = 1'b0;
end 
// cargar[ 21 ]
initial
begin
	cargar[21] = 1'b0;
end 
// cargar[ 20 ]
initial
begin
	cargar[20] = 1'b0;
end 
// cargar[ 19 ]
initial
begin
	cargar[19] = 1'b0;
end 
// cargar[ 18 ]
initial
begin
	cargar[18] = 1'b0;
end 
// cargar[ 17 ]
initial
begin
	cargar[17] = 1'b0;
end 
// cargar[ 16 ]
initial
begin
	cargar[16] = 1'b0;
end 
// cargar[ 15 ]
initial
begin
	cargar[15] = 1'b0;
end 
// cargar[ 14 ]
initial
begin
	cargar[14] = 1'b0;
end 
// cargar[ 13 ]
initial
begin
	cargar[13] = 1'b0;
end 
// cargar[ 12 ]
initial
begin
	cargar[12] = 1'b0;
end 
// cargar[ 11 ]
initial
begin
	cargar[11] = 1'b0;
end 
// cargar[ 10 ]
initial
begin
	cargar[10] = 1'b0;
end 
// cargar[ 9 ]
initial
begin
	cargar[9] = 1'b0;
end 
// cargar[ 8 ]
initial
begin
	cargar[8] = 1'b0;
end 
// cargar[ 7 ]
initial
begin
	cargar[7] = 1'b0;
end 
// cargar[ 6 ]
initial
begin
	cargar[6] = 1'b0;
end 
// cargar[ 5 ]
initial
begin
	cargar[5] = 1'b0;
end 
// cargar[ 4 ]
initial
begin
	cargar[4] = 1'b0;
end 
// cargar[ 3 ]
initial
begin
	cargar[3] = 1'b0;
	cargar[3] = #190000 1'b1;
	cargar[3] = #10000 1'b0;
end 
// cargar[ 2 ]
initial
begin
	cargar[2] = 1'b0;
	cargar[2] = #190000 1'b1;
	cargar[2] = #10000 1'b0;
end 
// cargar[ 1 ]
initial
begin
	cargar[1] = 1'b0;
	cargar[1] = #190000 1'b1;
	cargar[1] = #10000 1'b0;
end 
// cargar[ 0 ]
initial
begin
	cargar[0] = 1'b0;
	cargar[0] = #190000 1'b1;
	cargar[0] = #10000 1'b0;
end 

Instruction_pointer_vlg_sample_tst tb_sample (
	.cargar(cargar),
	.clk(clk),
	.get_ip(get_ip),
	.inc_ip(inc_ip),
	.load_ip(load_ip),
	.rst_ip(rst_ip),
	.sampler_tx(sampler)
);

Instruction_pointer_vlg_check_tst tb_out(
	.instruccion(instruccion),
	.sampler_rx(sampler)
);
endmodule

